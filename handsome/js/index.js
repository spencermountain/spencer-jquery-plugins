// Generated by CoffeeScript 1.6.3
(function($) {
  var bysize, bytime, human_defaults, render_defaults, segment;
  segment = function(text, fraction) {
    var end;
    fraction = fraction / 100;
    end = parseInt(text.length * fraction);
    return text.substring(0, end);
  };
  render_defaults = function(txt, options) {
    var defaults, percentage;
    options.normalize_to = options.normalise_to || txt.length;
    options.normalize_to = 100;
    if (typeof options.normalize_to === "string") {
      options.normalize_to = options.normalize_to.length;
    }
    percentage = txt.length / options.normalize_to;
    defaults = {
      duration: (options.duration || 1200) * percentage,
      humanize: false,
      resolution: txt.length,
      cursor: false
    };
    return $.extend(defaults, options);
  };
  human_defaults = function(txt, options) {
    var defaults;
    defaults = {
      duration: txt.length * 90,
      humanize: true,
      resolution: txt.length,
      cursor: true
    };
    return $.extend(defaults, options);
  };
  $.fn.handsome = function(txt, options, callback) {
    var delay, doit, el, i, last, part, percentage, steps;
    if (options == null) {
      options = {};
    }
    if (callback == null) {
      callback = function() {};
    }
    txt = txt || this.text() || "";
    if (options.human) {
      options = human_defaults(txt, options);
    } else {
      options = render_defaults(txt, options);
    }
    steps = options.duration / options.resolution;
    el = this;
    i = 0;
    percentage = 0;
    part = "";
    last = "";
    delay = 0;
    return (doit = function() {
      i++;
      percentage = (i / steps) * 100;
      console.log(percentage);
      part = segment(txt, percentage);
      if (part !== last) {
        if (options.cursor) {
          part += "|";
        }
        el.html(part);
      }
      if (i < steps) {
        delay = options.duration / steps;
        if (options.humanize) {
          delay += Math.floor(Math.random() * 250) - 100;
        }
        return setTimeout(doit, delay);
      } else {
        if (options.cursor) {
          el.text(el.text().replace(/\|$/, ""));
        }
        if (typeof callback === "function") {
          return callback();
        }
      }
    })();
  };
  $.fn.climb = function(number, options, callback) {
    var delay, doit, el, i, num, parts;
    if (options == null) {
      options = {};
    }
    delay = options.delay || 20;
    callback = callback || function() {};
    el = $(this);
    num = el.text() || number || 0;
    console.log(options);
    if (parseInt(num)) {
      if (options.average) {
        parts = bysize(num, options);
      } else {
        parts = bytime(num, options);
      }
    }
    i = 0;
    return (doit = function() {
      el.text(parts[i]);
      i++;
      if (i >= parts.length) {
        return callback;
      } else {
        return setTimeout(doit, delay);
      }
    })();
  };
  bytime = function(num, options) {
    var delay, parts, steps, time, _i, _results;
    console.log("hi");
    time = options.time || 1200;
    delay = options.delay || 10;
    steps = options.steps || time / delay;
    if (num < steps) {
      steps = num;
    }
    parts = (function() {
      _results = [];
      for (var _i = 0; 0 <= steps ? _i <= steps : _i >= steps; 0 <= steps ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).map(function(v) {
      return parseInt(num * (v / steps));
    });
    return parts;
  };
  bysize = function(num, options) {
    var average, delay, i, ideal_divisor, ideal_steps, max, parts, time;
    average = options.average || 100;
    time = options.time || 1200;
    delay = options.delay || 20;
    max = options.max || 5000;
    ideal_steps = time / delay;
    ideal_divisor = average / ideal_steps;
    if (((num / ideal_divisor) * delay) > max) {
      ideal_divisor = (average * 1.5) / ideal_steps;
    }
    parts = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; ideal_divisor > 0 ? _i <= num : _i >= num; i = _i += ideal_divisor) {
        _results.push(parseInt(i));
      }
      return _results;
    })();
    return parts;
  };
  $.handsome = function(options, callback) {
    var sel;
    if (options == null) {
      options = {};
    }
    if (callback == null) {
      callback = function() {};
    }
    sel = options.sel || ".handsome";
    return $(sel).each(function() {
      return $(this).handsome(null, options, callback);
    });
  };
  return $.climb = function(options, callback) {
    var sel;
    if (options == null) {
      options = {};
    }
    if (callback == null) {
      callback = function() {};
    }
    sel = options.sel || ".climb";
    return $(sel).each(function() {
      return $(this).climb(options, callback);
    });
  };
})(jQuery);

/*
//@ sourceMappingURL=index.map
*/
