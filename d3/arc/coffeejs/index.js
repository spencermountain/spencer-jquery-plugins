// Generated by CoffeeScript 1.6.3
$.fn.arc = function(data, options) {
  var already, arc, arcs, colours, label, r2ang, scale_angle, stage, sum, svg, wrapper;
  if (data == null) {
    data = [];
  }
  if (options == null) {
    options = {
      r: 75,
      delay: 0,
      duration: 800,
      ease: "linear",
      labels: true
    };
  }
  stage = this[0];
  colours = ["steelblue", "darkred", "#1f77b4", "#aec7e8", "#ff7f0e", "#ffbb78", "#2ca02c", "#98df8a", "#d62728", "#ff9896", "#9467bd", "#c5b0d5", "#8c564b", "#c49c94", "#e377c2", "#f7b6d2", "#7f7f7f", "#c7c7c7", "#bcbd22", "#dbdb8d", "#17becf", "#9edae5"];
  options.w = options.w || options.r * 2;
  options.h = options.h || options.r;
  sum = data.reduce((function(p, v) {
    return p + (v.value || 0);
  }), 0);
  scale_angle = d3.scale.linear().range([-(Math.PI / 2), Math.PI / 2]).domain([0, sum]);
  already = function(i) {
    if (i === 0) {
      return 0;
    }
    return data.slice(0, i).reduce((function(p, c) {
      return (parseInt(p) + c.value) || 0;
    }), 0);
  };
  r2ang = function(r) {
    return r * (180 / Math.PI);
  };
  data = data.map(function(v, i) {
    v.previous = already(i);
    return v;
  });
  arc = d3.svg.arc().startAngle(function(d) {
    return scale_angle(d.previous);
  }).endAngle(function(d) {
    return scale_angle(d.previous + d.value);
  }).innerRadius(function(d) {
    return options.r;
  }).outerRadius(function(d) {
    return 0.5 * options.r;
  });
  label = function(arcs) {
    if (options.labels) {
      return arcs.append("svg:text").attr("transform", function(d, i) {
        var c, h, mid, r, x, y;
        d = data[i];
        mid = d.previous + (d.value / 2);
        c = arc.centroid(d);
        x = c[0];
        y = c[1];
        r = options.label_r || options.r * 0.75;
        h = Math.sqrt(x * x + y * y);
        return "translate(" + (x / h * r) + ',' + (y / h * r) + (")rotate(" + (r2ang(scale_angle(mid))) + ")");
      }).attr("text-anchor", "middle").style("fill", "white").text(function(d, i) {
        return data[i].title || "";
      });
    }
  };
  if (d3.select(stage).select("svg")[0][0]) {
    console.log("exists");
    svg = d3.select(stage).select("svg");
    arcs = d3.select($("#results")[0]).select("svg").selectAll("path");
    arcs.transition().duration(1200).attr("d", function(d, i) {
      return arc(data[i]);
    });
    return label(arcs);
  } else {
    console.log("new");
    svg = d3.select(stage).append("svg").attr("width", options.w).attr("height", options.h);
    wrapper = svg.append("g").attr("transform", "translate( " + (options.w / 2) + ", " + options.h + " )");
    arcs = wrapper.selectAll("g").data(data).enter().append("g");
    arcs.append("path").style("fill", function(d, i) {
      return d.color || colours[i];
    }).attr("d", arc);
    label(arcs);
    return arcs.append("svg:title").text(function(d) {
      return d.title || "";
    });
  }
};

/*
//@ sourceMappingURL=index.map
*/
